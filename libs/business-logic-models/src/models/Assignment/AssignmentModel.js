import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
/* eslint-disable camelcase */


import { Record, List } from 'immutable';
import isEmpty from 'lodash/isEmpty';
import { isFeatureActive } from '@hmhco/feature-flags';
import { PARTNER_WRITABLE } from '@hmhco/connected-partner-helper';
import ActivityModel from './ActivityModel';
import { assignmentStatuses, sifRefObjectTypes } from './AssignmentFieldTypes';
var BaseRecord = Record({
  activities: List(),
  attributes: null,
  autoGenerated: null,
  availableDate: '',
  customClientData: null,
  dueDate: '',
  preamble: '',
  refId: null,
  isFromPreviousSchoolYears: null,
  lockedAfterDueDate: '',
  sectionId: null,
  sharedAssignmentType: '',
  skipCheckAvailable: null,
  staffPersonalRefId: null,
  startDate: '',
  status: assignmentStatuses.UNKNOWN,
  studentGroup: null,
  studentPersonalRefId: null,
  submitDate: '',
  parentReviewRestrictedDate: '',
  partnerIdentifier: '',
  reviewAvailable: '',
  teacherAssignmentRefId: null,
  title: ''
});

var AssignmentModel = /*#__PURE__*/function (_BaseRecord) {
  _inherits(AssignmentModel, _BaseRecord);

  var _super = _createSuper(AssignmentModel);

  function AssignmentModel() {
    var _this;

    var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AssignmentModel);

    var activities = List(record.activities).map(function (activity) {
      return new ActivityModel(activity);
    });
    _this = _super.call(this, _objectSpread(_objectSpread({}, record), {}, {
      activities: activities
    }));
    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
  }

  _createClass(AssignmentModel, [{
    key: "isCustomAssessment",
    value: function isCustomAssessment() {
      var sif_RefObject = this.getSif_RefObject();
      return sif_RefObject === sifRefObjectTypes.CUSTOM_ASSESSMENT;
    }
  }, {
    key: "isProgramAssessment",
    value: function isProgramAssessment() {
      var sif_RefObject = this.getSif_RefObject();
      return sif_RefObject === sifRefObjectTypes.PROGRAM_ASSESSMENT;
    }
  }, {
    key: "isOtherTextResource",
    value: function isOtherTextResource() {
      var sif_RefObject = this.getSif_RefObject();
      return sif_RefObject === sifRefObjectTypes.OTHER_TEXT_RESOURCE;
    }
  }, {
    key: "isPerformanceTask",
    value: function isPerformanceTask() {
      var sif_RefObject = this.getSif_RefObject();
      return sif_RefObject === sifRefObjectTypes.PERFORMANCE_TASK;
    }
  }, {
    key: "isStudentGrowthMeasure",
    value: function isStudentGrowthMeasure() {
      var sif_RefObject = this.getSif_RefObject();
      return sif_RefObject === sifRefObjectTypes.STUDENT_GROWTH_MEASURE;
    }
  }, {
    key: "isHMHAssessment",
    value: function isHMHAssessment() {
      var sifRefObject = this.getSif_RefObject();
      return sifRefObject === sifRefObjectTypes.HMH_ASSESSMENT;
    }
  }, {
    key: "isPartnerAssignment",
    value: function isPartnerAssignment() {
      return !!this.getIn(['activities', 0, 'sourceObject', 'connectedPartnerLaunch']);
    }
  }, {
    key: "hasValidStatus",
    value: function hasValidStatus() {
      return Boolean(this.status !== assignmentStatuses.UNKNOWN && assignmentStatuses[this.status]);
    }
  }, {
    key: "getPartnerIdentifier",
    value: function getPartnerIdentifier() {
      return this.partnerIdentifier;
    }
  }, {
    key: "getAutoGenerated",
    value: function getAutoGenerated() {
      return this.autoGenerated;
    }
  }, {
    key: "getDeepLinkParameters",
    value: function getDeepLinkParameters() {
      return this.getIn(['activities', 0, 'sourceObject', 'deepLinkParameters']);
    }
  }, {
    key: "getConnectedPartnerLaunch",
    value: function getConnectedPartnerLaunch() {
      return this.getIn(['activities', 0, 'sourceObject', 'connectedPartnerLaunch']);
    }
  }, {
    key: "getSif_RefObject",
    value: function getSif_RefObject() {
      // sif_RefObject returned from assignment service
      var result = this.getIn(['activities', 0, 'sourceObject', 'sif_RefObject']);

      if (!result) {
        // sifRefObject returned from WH
        result = this.getIn(['activities', 0, 'sourceObject', 'sifRefObject']);
      }

      return result;
    }
  }, {
    key: "getResourceId",
    value: function getResourceId() {
      return this.getIn(['activities', 0, 'sourceObject', 'attributes', 'refId']);
    }
  }, {
    key: "getGoogleCourseId",
    value: function getGoogleCourseId() {
      return this.getIn(['activities', 0, 'sourceObject', 'attributes', 'googleCourseId']);
    }
  }, {
    key: "getMediaType",
    value: function getMediaType() {
      return this.getIn(['activities', 0, 'sourceObject', 'attributes', 'mediaType']);
    }
  }, {
    key: "getHmhAssignmentId",
    value: function getHmhAssignmentId() {
      return this.teacherAssignmentRefId;
    }
  }, {
    key: "getAssessmentId",
    value: function getAssessmentId() {
      return this.getIn(['activities', 0, 'sourceObject', 'value']);
    }
  }, {
    key: "getCustomLessonId",
    value: function getCustomLessonId() {
      return this.getIn(['activities', 0, 'sourceObject', 'customLessonId']);
    }
  }, {
    key: "getActivityId",
    value: function getActivityId() {
      return this.getIn(['activities', 0, 'refId']);
    }
  }, {
    key: "getDisciplineId",
    value: function getDisciplineId() {
      return this.getIn(['activities', 0, 'sourceObject', 'disciplineId']);
    }
  }, {
    key: "getProgramId",
    value: function getProgramId() {
      return this.getIn(['activities', 0, 'sourceObject', 'programId']);
    }
  }, {
    key: "getProgramIdFromAttributes",
    value: function getProgramIdFromAttributes() {
      return this.getIn(['activities', 0, 'sourceObject', 'attributes', 'programId']);
    }
  }, {
    key: "getStatus",
    value: function getStatus() {
      return this.status;
    }
  }, {
    key: "getDisplayScore",
    value: function getDisplayScore() {
      return this.getIn(['activities', 0, 'assignmentProficiency', 'scores', 0, 'displayScore'], null);
    }
  }, {
    key: "getTotalProficiencyPercentage",
    value: function getTotalProficiencyPercentage() {
      return this.getIn(['activities', 0, 'assignmentProficiency', 'scores', 0, 'totalProficiencyPercentage'], null);
    }
  }, {
    key: "getScore",
    value: function getScore() {
      var score = this.getTotalProficiencyPercentage();

      if (this.isNullProficiencyPercentage()) {
        score = '-';
      }

      if (this.isStudentGrowthMeasure() || this.isHMHAssessment()) {
        // use display score for all sgm and mskils assessments
        return this.getDisplayScore();
      }

      return score;
    }
  }, {
    key: "isNullProficiencyPercentage",
    value: function isNullProficiencyPercentage() {
      if (this.getTotalProficiencyPercentage() === null && isFeatureActive('connectedPartner', true)) {
        return true;
      }

      return false;
    }
  }, {
    key: "getTotalItems",
    value: function getTotalItems() {
      return this.getIn(['activities', 0, 'assignmentProficiency', 'scores', 0, 'totalItems'], null);
    }
  }, {
    key: "getPerformanceBandId",
    value: function getPerformanceBandId() {
      return this.getIn(['activities', 0, 'assignmentProficiency', 'scores', 0, 'performanceBand', 'id'], null);
    }
  }, {
    key: "getAssignmentTitle",
    value: function getAssignmentTitle() {
      return this.title;
    }
  }, {
    key: "getParentReviewRestrictedDate",
    value: function getParentReviewRestrictedDate() {
      return this.parentReviewRestrictedDate;
    }
  }, {
    key: "getReviewAvailable",
    value: function getReviewAvailable() {
      return this.reviewAvailable;
    }
  }, {
    key: "getDueDate",
    value: function getDueDate() {
      return this.dueDate;
    }
  }, {
    key: "getSubmitDate",
    value: function getSubmitDate() {
      return this.submitDate;
    }
  }, {
    key: "getSectionId",
    value: function getSectionId() {
      return this.sectionId;
    }
  }, {
    key: "isLearnosityAssessment",
    value: function isLearnosityAssessment() {
      return this.isCustomAssessment() || this.isProgramAssessment();
    }
  }, {
    key: "getLockedAfterDueDate",
    value: function getLockedAfterDueDate() {
      return this.lockedAfterDueDate;
    }
  }, {
    key: "getSharedAssignmentType",
    value: function getSharedAssignmentType() {
      return this.sharedAssignmentType;
    }
  }, {
    key: "isCompleted",
    value: function isCompleted() {
      return this.status === assignmentStatuses.COMPLETED;
    }
  }, {
    key: "isReadyForScoring",
    value: function isReadyForScoring() {
      return this.status === assignmentStatuses.READY_FOR_SCORING;
    }
  }, {
    key: "isNotStarted",
    value: function isNotStarted() {
      return this.status === assignmentStatuses.NOT_STARTED;
    }
  }, {
    key: "isInProgress",
    value: function isInProgress() {
      return this.status === assignmentStatuses.IN_PROGRESS;
    }
  }, {
    key: "isWritableAssignment",
    value: function isWritableAssignment() {
      return this.getPartnerIdentifier() === PARTNER_WRITABLE;
    }
  }, {
    key: "canLaunchLiveAssessment",
    value: function canLaunchLiveAssessment() {
      var status = this.status;
      return status === assignmentStatuses.NOT_STARTED || status === assignmentStatuses.IN_PROGRESS;
    }
  }, {
    key: "canReviewReadyToScoreAssignment",
    value: function canReviewReadyToScoreAssignment() {
      return this.isPartnerAssignment() && this.isWritableAssignment() && this.isReadyForScoring();
    }
  }, {
    key: "canReviewCompletedAssignment",
    value: function canReviewCompletedAssignment() {
      var isReviewableAssignment = this.isLearnosityAssessment() || this.isPerformanceTask() || this.isPartnerAssignment();
      return this.isCompleted() && isReviewableAssignment;
    }
  }, {
    key: "canReopenTextAssessment",
    value: function canReopenTextAssessment() {
      return this.isCompleted() && this.isOtherTextResource();
    }
  }, {
    key: "canLaunchReviewAssessment",
    value: function canLaunchReviewAssessment() {
      return this.canReviewCompletedAssignment() || this.canReviewReadyToScoreAssignment();
    }
  }, {
    key: "mergeWithLaunchDetailsResponse",
    value: function mergeWithLaunchDetailsResponse(launchDetails) {
      var activity = this.activities.get(0);

      if (!activity) {
        activity = new ActivityModel();
      }

      var rawActivity = activity.toJS();
      rawActivity.sourceObject.isbn = launchDetails.assessmentBankID;
      rawActivity.sourceObject.value = launchDetails.assessmentID;
      var newActivity = new ActivityModel(rawActivity);
      return this.set('activities', List([newActivity]));
    }
  }, {
    key: "hasDirections",
    value: function hasDirections() {
      return !isEmpty(this.preamble);
    }
  }, {
    key: "getDirections",
    value: function getDirections() {
      return this.preamble;
    }
  }, {
    key: "getIsFromPreviousSchoolYears",
    value: function getIsFromPreviousSchoolYears() {
      return this.isFromPreviousSchoolYears;
    }
  }, {
    key: "getSkipCheckAvailable",
    value: function getSkipCheckAvailable() {
      return this.skipCheckAvailable;
    }
  }]);

  return AssignmentModel;
}(BaseRecord);

export default AssignmentModel;