"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _validation = require("./utils/validation.js");

var _AuthError = _interopRequireDefault(require("./error/AuthError.js"));

var _errorCode = require("./error/error-code.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var JWT = /*#__PURE__*/function () {
  function JWT(encoded) {
    var _this = this;

    _classCallCheck(this, JWT);

    var getClaims = function getClaims() {
      if ((0, _validation.isNonEmptyString)(encoded)) {
        var parts = encoded.split(/\./);

        if (parts && parts.length === 3) {
          try {
            var decodedClaims = atob(parts[1].replace(/-/g, '+').replace(/_/g, '/'));
            var parsedJSON = JSON.parse(decodedClaims);
            _this.encoded = encoded;
            return parsedJSON;
          } catch (err) {
            console.error('Invalid JWT', err);
            throw new _AuthError["default"](_errorCode.AUTH, 'Invalid JWT');
          }
        }
      }

      _this.encoded = null;
      return {};
    };

    this.claims = getClaims();
  }

  _createClass(JWT, [{
    key: "getClaim",
    value: function getClaim(name) {
      return this.claims[name];
    }
  }, {
    key: "token",
    get: function get() {
      return this.encoded;
    }
  }]);

  return JWT;
}();

exports["default"] = JWT;